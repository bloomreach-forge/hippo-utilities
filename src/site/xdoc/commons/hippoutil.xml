<?xml version="1.0"?>
<!--
  Copyright 2012 Hippo

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->

<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN" "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>HST PsUtil</title>
  </properties>
  <body>
    <section name="Commons HippoUtil">
      <subsection name="org.onehippo.forge.utilities.commons.HippoUtil">
        <p>Static String related utility class. It has these public constants:</p>
        <source><![CDATA[
  /**
   * Map from mime type to common file extension, e.g. "application/pdf" to "pdf".
   */
  Map<String, String> MIME_TYPE_TO_EXTENSION_MAP

  /**
   * A String array with length zero.
   */
  String[] EMPTY_STRING_ARRAY]]>
        </source>
        <p>There are the following methods:</p>
        <source><![CDATA[
  /**
   * Abbreviate a text to _approximately_ some number of characters, trying to
   * find a nice word end and then appending some string (defaulting to three dots).
   */
  String abbreviateText(String text, int numberOfCharacters, String appendText)

  /**
   * Abbreviate a text to _approximately_ some number of characters, trying to
   * find a nice word end and then appending three dots.
   */
  String abbreviateText(String text, int numberOfCharacters)

  /**
   * Concatenates a collection of strings by concatenating the strings and inserting a separator in between
   * each of them. Nulls are handled automatically and there is no separator at the end of sequence.
   */
  String concat(Collection<String> strings, String separator)

  /**
   * Concatenates an array of strings by concatenating the strings and inserting a separator in between
   * each of them. Nulls are handled automatically and there is no separator at the end of sequence.
   */
  String concat(String[] strings, String separator)

  /**
   * Remove empty (length zero when trimmed) values from a list.
   */
  List<String> removeEmptyValues(List<String> values)

  /**
   * Remove empty (length zero when trimmed) values from an array.
   */
  String[] removeEmptyValues(String[] values)

  /**
   * Replaces a ${variableName} in a template with replacement value provided.
   */
  String replacePlaceHolders(String variableName, String replacementValue, String template)

  /**
   * Simplify a genuine mime type into a simple one like "pdf", "image" or an extension like "doc".
   */
  String simplifyMimeType(String mimeType)

  /**
   * Get an extension from a mime type.
   */
  String getExtensionFromMimeType(String mimeType)]]>
        </source>
      </subsection>
    </section>
  </body>
</document>
